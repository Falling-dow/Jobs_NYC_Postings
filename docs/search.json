[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC_Job_Postings",
    "section": "",
    "text": "1 Introduction\nAs graduate students, many of us are currently exploring job and internship opportunities, so we thought it would be interesting to look into government jobs in New York City. This dataset provides information about job openings on the City of New York’s official jobs site, which includes both internal postings (for city employees) and external ones (open to the public). We want to explore questions like: what kinds of jobs are available in different government departments or sectors, what the salaries look like, and whether most of these jobs are internal or open to everyone. I’m also curious to see what career levels (entry-level, experienced, etc.) are in demand. This project will give us a better understanding of what government job opportunities look like and how accessible they are.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThe data for this project comes from NYC Open Data, specifically the dataset titled “Jobs NYC Postings,” provided by the Department of Citywide Administrative Services (DCAS). This dataset is collected from information on current job postings available on the City of New York’s official jobs site (http://www.nyc.gov/html/careers/html/search/search.shtml), including both internal postings (restricted to city employees) and external postings (open to the public). The data is structured with categorical variables, such as agency/department and job title, and numerical variables, such as the number of positions and salary ranges. It consists of 5,560 rows and 30 columns and is updated weekly, with the most recent update on November 19, 2024. The dataset primarily includes job postings from 2024, which should not cause huge problems since outdated job postings would not be useful for this analysis. Potential issues include some missing or incomplete values that will need to be handled during the data cleaning process. To import the data, I downloaded the CSV file directly from the NYC Open Data portal (https://data.cityofnewyork.us/City-Government/Jobs-NYC-Postings/kpav-sd4t/about_data)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nlibrary(ggplot2)\n\nnyc_jobs &lt;- read.csv(\"./Jobs_NYC_Postings.csv\")\n\n# turn empty cells into NA\nnyc_jobs[nyc_jobs == \"\"] &lt;- NA\n\nmissing_counts &lt;- colSums(is.na(nyc_jobs))\nmissing_percentage &lt;- (missing_counts / nrow(nyc_jobs)) * 100\nmissing_data &lt;- data.frame(Column = names(missing_counts), \n                           Missing_Count = missing_counts, \n                           Missing_Percentage = missing_percentage)\n\nmissing_data_only &lt;- subset(missing_data, Missing_Count &gt; 0)\n\n# plot 1: count of missing value for all columns\nggplot(missing_data, \n       aes(x = reorder(Column, -Missing_Count), y = Missing_Count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  labs(title = \"Count of Missing Values per Column\", \n       x = \"Columns\", \n       y = \"Count of Missing Values\") +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 8, hjust = 1)\n    ) +\n  scale_y_continuous(breaks = seq(0, max(missing_data$Missing_Count), by = 1000)) # Custom x-axis breaks\n\n\n\n\n\n\n\n\n\nCode\n# Second Plot: Pie Chart for Proportion\nmissing_data_only$Proportion &lt;- missing_data_only$Missing_Count / sum(missing_data_only$Missing_Count)\n\nggplot(missing_data_only, aes(x = \"\", y = Proportion, fill = Column)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  geom_text(aes(label = paste0(round(Proportion * 100, 1), \"%\")), \n            position = position_stack(vjust = 0.5), \n            color = \"white\", size = 4) +\n  labs(title = \"Proportion of Missing Values by Column\") +\n  theme_void() +\n  theme(legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nFirst graph: Count of Missing Values per Column\nThis bar chart shows the total number of missing values for each column in the dataset, knowing this is important because we’ll need to decide how to handle missing values, especially for columns with a lot of missing data. Specially, the column ‘Recruitment Contact’ has the highest count of missing values, with over 5,000 rows missing. This suggests the data for this column is almost completely unavailable. However, other essential columns like ‘Agency’, ‘Salary Range’, etc don’t have missing value, which is convient for later analysis.\nSecond graph: Proportion of Missing Values by Missing Columns\nThis pie chart shows how much each column contributes to the total missing data, focusing only on columns with missing values. This chart helps us understand the overall impact of missing values from each column, so we can prioritize which ones to clean or exclude based on how much they contribute to the total missing data. Specifically, the “Recruitment Contact” column alone makes up about 23.3% of all missing data, which means it’s the most incomplete column in the dataset.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Data Preprocessing",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#data-preprocessing",
    "href": "results.html#data-preprocessing",
    "title": "3  Results",
    "section": "",
    "text": "3.1.1 Import\n\n\nCode\nlibrary(tidyr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggridges)\nlibrary(stringr)\n\nnyc_jobs &lt;- read.csv(\"./Jobs_NYC_Postings.csv\")\n\n# replace '.' with '_' in column name\ncolnames(nyc_jobs) &lt;- gsub(\"\\\\.\", \"_\", colnames(nyc_jobs))\n\n\nWe first import nyc_jobs dataset and relevent packages, and replace ‘.’ with ’_’ in column name.\n\n\n3.1.2 Drop irrelevent columns from previous part\n\n\nCode\nnyc_jobs &lt;- nyc_jobs |&gt; \n  select(-c(To_Apply,\n            Post_Until, \n            Work_Location_1, \n            Hours_Shift, \n            Recruitment_Contact))\n\n\nFrom the Data section, we identified several columns with missing values. After evaluation, we determined that columns such as To_Apply, Post_Until, Work_Location_1, Hours_Shift, and Recruitment_Contact had too many missing values and were not critical to the objectives of this project. Therefore, we decided to remove them from the dataset to streamline our analysis.\n\n\nCode\nnyc_jobs &lt;- nyc_jobs |&gt; \n  uncount(X__Of_Positions)\n\n\nThe column X__Of_Positions represents the number of positions posted for a job. To simplify the analysis, we used the uncount() function to expand the dataset. For example, if a job has 3 positions, the dataset will now include 3 identical rows for that job, representing each position individually.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#number-of-job-position-what-type-of-jobs-are-most-available",
    "href": "results.html#number-of-job-position-what-type-of-jobs-are-most-available",
    "title": "3  Results",
    "section": "3.2 Number of Job Position: what type of jobs are most available?",
    "text": "3.2 Number of Job Position: what type of jobs are most available?\n\n\nCode\nggplot(nyc_jobs, aes(x = Posting_Type, fill = Salary_Frequency)) +\n  geom_bar(position = \"dodge\") +\n  scale_fill_manual(values = c(\"salmon\", \"orange\", \"skyblue\"), \n    name = \"Salary Frequency\") +\n  labs(title = \"Comparison of External vs Internal by Salary Frequency\",\n       x = \"Posting Type\",\n       y = \"Count\",\n       fill = \"Salary Frequency\") +\n  theme_grey(15)\n\n\n\n\n\n\n\n\n\nIn the context of government jobs, external jobs (open to the public) and internal jobs (restricted to city employees) have similar numbers. This is somewhat unexpected, as there is often talk about the ‘hidden job market’ within government roles. Most jobs are paid annually, followed by hourly and daily rates.\nIn this project, salaries are another key numerical variable. However, since this dataset does not include many specific information about daily or yearly working hours, we will focus exclusively on jobs that pay annually. Thus, we will only keep rows with Salary_Frequency is ‘Annual’.\n\n\nCode\nnyc_jobs &lt;- nyc_jobs |&gt; \n  filter(Salary_Frequency == \"Annual\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#what-agencydepartment-has-the-most-job-position",
    "href": "results.html#what-agencydepartment-has-the-most-job-position",
    "title": "3  Results",
    "section": "3.3 What agency/department has the most job position?",
    "text": "3.3 What agency/department has the most job position?\n\n\nCode\n# check distribution of Agency\nagency_counts &lt;- nyc_jobs |&gt; \n  group_by(Agency) |&gt; \n  summarise(Number_of_Position = n()) |&gt; \n  arrange(desc(Number_of_Position))\n\nhead(agency_counts)\n\n\n# A tibble: 6 × 2\n  Agency                         Number_of_Position\n  &lt;chr&gt;                                       &lt;int&gt;\n1 DEPT OF ENVIRONMENT PROTECTION               1633\n2 BRONX DISTRICT ATTORNEY                      1153\n3 DEPT OF HEALTH/MENTAL HYGIENE                1024\n4 HRA/DEPT OF SOCIAL SERVICES                   978\n5 DEPARTMENT OF TRANSPORTATION                  718\n6 DEPT OF DESIGN & CONSTRUCTION                 704\n\n\nThere are 63 distinct agencies, each with a corresponding number of job positions posted. Upon examining the data, we observe that the top 20 agencies have more than 50 job postings, which serves as a reasonable threshold. To simplify the analysis and reduce noise in future visualizations, we will merge agencies with fewer than 50 job postings since 2022 into an “Other” category.\n\n\nCode\nagency_counts_mutated &lt;- agency_counts |&gt; \n  mutate(Agency = ifelse(Number_of_Position &lt; 50, \"Other\", Agency)) |&gt; \n  group_by(Agency) |&gt; \n  summarise(Number_of_Position = sum(Number_of_Position)) |&gt; \n  arrange(desc(Number_of_Position))\n\n# Cleveland dot plot\nggplot(agency_counts_mutated, aes(x = Number_of_Position, y = reorder(Agency, Number_of_Position))) +\n  geom_point(color = \"steelblue\", size = 3) +\n  labs(\n    title = \"Cleveland Dot Plot of Job Counts by Agency\",\n    x = \"Number_of_Position\",\n    y = \"Agency\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWe now reduced the number of agency to 21 (Top20 + Other), which improves the readability of graph as we can focus on major agencies.\nThe agency with the most job positions is the Department of Environmental Protection, as it is the top point in the dot plot with the largest count. This is reasonable given the increasing importance of environmental issues, such as climate change and sustainable development, which require a significant workforce to address effectively.\nFollowing DEP, the Bronx District Attorney, the Department of Health/Mental Hygiene, and the HRA/Dept of Social Services also have significant job postings, each with around or above 1,000 positions. These are also reasonable as the Bronx District Attorney might manages a high volume of legal cases, which requires substantial staffing. The Department of Health/Mental Hygiene need to deal with public health challenges, while HRA/Dept of Social Services need to focuses on essential support services related to social welfare.\nThe “Other” category includes numerous small agencies that collectively account for a notable but less significant portion of the job postings.\n\n3.3.1 Programming Languages Requirement vs. Number of Position: slightly higher proportion of job position require programming languages\n\n\nCode\n# define back-end and front-end\nback_end_skills &lt;- c(\"R\", \"Python\", \"Java\", \"SQL\", \"C\\\\+\\\\+\", \"C\\\\b\", \"Go\", \"Ruby\", \"Perl\", \"C#\")\nfront_end_skills &lt;- c(\"HTML\", \"CSS\", \"JavaScript\", \"TypeScript\", \"React\", \"Angular\", \"Vue\")\n\nskill_labels &lt;- c(\n  \"Back_End\" = \"Back-End\\n(R, Python, SQL, Java)\",\n  \"Front_End\" = \"Front-End\\n(HTML, CSS, JavaScript)\",\n  \"Any_Programming\" = \"Any Programming\\n(Back-End or Front-End)\",\n  \"No_Programming\" = \"No Programming\\nRequired\"\n)\n\n# add programming skill column\nnyc_jobs &lt;- nyc_jobs |&gt;\n  mutate(Preferred_Skills = if_else(is.na(Preferred_Skills), \"\", Preferred_Skills)) |&gt;\n  mutate(\n    back_end_required = str_detect(Preferred_Skills, \n                                   regex(paste(back_end_skills, collapse = \"|\"), \n                                         ignore_case = TRUE)),\n    front_end_required = str_detect(Preferred_Skills, \n                                    regex(paste(front_end_skills, collapse = \"|\"), \n                                          ignore_case = TRUE)),\n    any_programming_required = back_end_required | front_end_required,\n    no_programming_required = !any_programming_required\n  )\n\n\n\n\nCode\nprogramming_summary &lt;- nyc_jobs |&gt; \n  mutate(\n    Programming_Category = case_when(\n      no_programming_required ~ \"No Programming Required\",\n      back_end_required & front_end_required ~ \"Back-End & Front-End\\n(HTML, CSS, JavaScript)\",\n      back_end_required & !front_end_required ~ \"Back-End\\n(R, Python, SQL, Java)\",\n      front_end_required & !back_end_required ~ \"Front-End\\n(HTML, CSS, JavaScript)\"\n    )\n  ) |&gt; \n  group_by(Programming_Category) |&gt; \n  summarise(Count = n()) |&gt; \n  mutate(\n    Programming_Type = case_when(\n      Programming_Category == \"No Programming Required\" ~ \"No Programming Required\",\n      TRUE ~ \"Required Programming\"\n    )\n  )\n\nggplot(programming_summary, aes(x = Programming_Type, y = Count, fill = Programming_Category)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_manual(values = c(\"salmon\", \"skyblue\", \"orange\", \"lightgreen\"), \n                    name = \"Programming_Category\") +\n  labs(\n    title = \"Programming Language Requirements\",\n    x = \"Programming Requirement\",\n    y = \"Number of Jobs\",\n    fill = \"Programming Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 0, hjust = 0.5),\n    legend.text = element_text(size = 8, lineheight = 1), \n    legend.key.height = unit(1.5, \"lines\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nprogramming_pie_data &lt;- programming_summary |&gt; \n  mutate(Percentage = Count / sum(Count) * 100)\n\nggplot(programming_pie_data, aes(x = \"\", y = Percentage, fill = Programming_Category)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(\"y\", start = 0) +\n  labs(\n    title = \"Distribution of Programming Skills in NYC Job Postings\",\n    fill = \"Skill Type\"\n  ) +\n  scale_fill_manual(values = c(\"salmon\", \"skyblue\", \"orange\"), \n                    name = \"Skill Type\") +\n  theme_grey() +\n  theme(\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_text(hjust = 0.5, size = 13, face = \"bold\"),\n    legend.title = element_text(size = 12, face = \"bold\"),\n    legend.text = element_text(size = 8),\n    legend.key.height = unit(1.5, \"lines\")\n  ) +\n  geom_text(aes(label = paste0(round(Percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5), size = 4, color = \"black\")\n\n\n\n\n\n\n\n\n\nBar chart and pie chart together show the distribution of job positions based on programming language requirements. We can see that a larger number (55.8% + 0.8% = 56.6%) of positions fall under the category of “Required Programming” compared to “No Programming Required(43.4%)” Among the positions requiring programming, the majority specify Back-End skills (55.8%) like R, Python, SQL, Java , with a smaller fraction (0.8%) requiring both Front-End and Back-End programming skills. Another insight is that there is no job only requiring Front-End programming skills. Thus, grasping common Back-End programming languages like python, c++ is necessary for seeking relevant government jobs.\nThis trend shows the increasing demand for programming skills, especially in back-end technologies, for government job postings. It also highlights the importance of technical skills in today’s job market.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#exploring-factors-influencing-salaries-career-level-job-category-and-programming-languages",
    "href": "results.html#exploring-factors-influencing-salaries-career-level-job-category-and-programming-languages",
    "title": "3  Results",
    "section": "3.4 Exploring Factors Influencing Salaries: Career Level, Job Category, and Programming Languages",
    "text": "3.4 Exploring Factors Influencing Salaries: Career Level, Job Category, and Programming Languages\nAnother variable that we are interested in is salaries. Specifically, we are want to learn about factors that contribute to higher salary. In the following section, we will explore the influence of candidates’ skill set, career level, job category on salary.\n\n3.4.1 The distribution of salary is unbalanced and right skewed, indicating some positions have exceptionally high salary.\nWe first add Median_Salary to the dataset, which is calculated by median salary = (Salary_Range_From + Salary_Range_To) / 2, then check the distribution of Median_Salary\n\n\nCode\n# add the Median_Salary column\nnyc_jobs &lt;- nyc_jobs |&gt; \n  mutate(Median_Salary = (Salary_Range_From + Salary_Range_To) / 2)\n\nggplot(nyc_jobs, aes(sample = Median_Salary)) +\n  stat_qq() +\n  stat_qq_line(color = \"salmon\") +\n  labs(\n    title = \"QQ Plot of Median Salary Distribution\",\n    x = \"Theoretical Quantiles\",\n    y = \"Sample Quantiles\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(nyc_jobs, aes(x = Median_Salary)) +\n  geom_histogram(aes(y = after_stat(density)), \n                 bins = 20, \n                 fill = \"skyblue\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  geom_density(color = \"salmon\", size = 1.2, adjust = 2) + \n  stat_function(fun = dnorm, \n                args = list(mean = mean(nyc_jobs$Median_Salary, na.rm = TRUE),\n                sd = sd(nyc_jobs$Median_Salary, na.rm = TRUE)),\n                color = \"steelblue\",\n                linewidth = 1.2) + # Normal curve\n  scale_x_continuous(labels = scales::comma,\n                     breaks = seq(0, max(nyc_jobs$Median_Salary, na.rm = TRUE), \n                                  by = 50000)) +\n  labs(title = \"Histogram of Median Salary with Density and Normal Curve\",\n       x = \"Median Salary\",\n       y = \"Density\",\n       caption = \"Red line: Density Curve | Blue line: Normal Curve\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nThe QQ plot shows that the distribution of Median Salary is not normal but right skewed. We can also confirm this idea from histogram of median salary with density curve(red) and normal curve(blue). The unbalanced distribution of median salary implies that we need to explore different variables that might potentially explain why salary varies a lot across different job position, and why the distribution is right skewed with long tails (i.e. job position with exceptionally high salary)\n\n\n3.4.2 Higher careel level tends to have higher salary as well as higher variability in salary\n\n\nCode\n# Unique career levels\ncat(\"Career_Level includes:\", paste(unique(nyc_jobs$Career_Level), collapse = \", \"), \"\\n\")\n\n\nCareer_Level includes: Entry-Level, Experienced (non-manager), Manager, Executive \n\n\nCode\n# Levels of career levels\ncat(\"Career_Level has levels:\", paste(levels(nyc_jobs$Career_Level), collapse = \", \"), \"\\n\")\n\n\nCareer_Level has levels:  \n\n\n\n\nCode\nnyc_jobs &lt;- nyc_jobs |&gt;\n  mutate(Career_Level = factor(Career_Level, \n                               levels = c(\"Entry-Level\", \n                                          \"Experienced (non-manager)\", \n                                          \"Manager\", \n                                          \"Executive\")))\n\ncat(\"After setting levels, Career_Level has levels:\", paste(levels(nyc_jobs$Career_Level), collapse = \", \"), \"\\n\")\n\n\nAfter setting levels, Career_Level has levels: Entry-Level, Experienced (non-manager), Manager, Executive \n\n\n\n\nCode\nsalary_data_long &lt;- nyc_jobs |&gt; \n  select(Career_Level, Salary_Range_From, Salary_Range_To) |&gt; \n  pivot_longer(cols = c(Salary_Range_From, Salary_Range_To), \n               names_to = \"Salary_Type\", \n               values_to = \"Salary\")\n\nggplot(salary_data_long, aes(x = Salary, y = Career_Level, fill = Salary_Type)) +\n  geom_density_ridges(alpha = 0.5, scale = 0.8, bandwidth = 15000) +\n  scale_x_continuous(labels = scales::comma) +\n  scale_fill_manual(values = c(\"salmon\", \"skyblue\"), \n                    name = \"Salary_Type\") +\n  labs(\n    title = \"Density Distribution of Salary Ranges by Career Level\",\n    x = \"Salary\",\n    y = \"Career Level\",\n    fill = \"Salary Type\"\n  ) +\n  theme_grey() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n“Entry-level” and “Experienced (non-manager)” positions show relatively narrow salary distributions, with most salaries concentrated below $100,000. However, “Experienced (non-manager)” positions exhibit a slightly right-skewed ending salary distribution, indicating higher variability at the upper end. In contrast, “Manager” and “Executive” roles display significantly wider salary distributions. “Manager” salaries typically start between $50,000 and $100,000 and extend to around $100,000 to $200,000. At the “Executive” level, salaries are notably higher, with distributions heavily skewed toward the upper range, often surpassing $200,000.\nOverall, “Entry-level” and “Experienced (non-manager)” roles tend to have more concentrated salary ranges, while “Manager” and “Executive” positions show higher salaries and greater variability.\n\n\nCode\n# Create a box plot for Median_Salary by Career_Level\nggplot(nyc_jobs, aes(x = Career_Level, y = Median_Salary)) +\n  geom_boxplot() +\n  scale_y_continuous(labels = scales::comma) +\n  labs(\n    title = \"Box Plot of Median Salary by Career Level\",\n    x = \"Career Level\",\n    y = \"Median Salary\"\n  ) +\n  theme_grey() +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5))\n\n\n\n\n\n\n\n\n\nThis box plot provides a visual comparison of the Median_Salary across different career levels. It demonstrates that “Entry-Level” and “Experienced (non-manager)” positions have relatively concentrated salary ranges, with median salaries mostly below $100,000 and fewer outliers. In contrast, “Manager” and “Executive” positions exhibit much higher salary ranges and greater variability. Median salaries for “Manager” positions fall around $125,000, with IQRs extending higher and notable outliers pushing beyond $200,000. “Executive” roles, as expected, show the highest median salaries and the widest IQR, with 25% of the salaries data exceeding $200,000.\nThis pattern confirms the earlier conclusion that “Entry-Level” and “Experienced (non-manager)” position have lower salary and more concentrated salary distribution, while “Manager” and “Executive” roles not only offer higher pay but also greater variability in salary.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#job-category-vs-salary-technology-data-innovation-has-the-highest-median-salaries-while-building-operations-maintenance-fall-at-the-lowest-end-of-the-salary-range",
    "href": "results.html#job-category-vs-salary-technology-data-innovation-has-the-highest-median-salaries-while-building-operations-maintenance-fall-at-the-lowest-end-of-the-salary-range",
    "title": "3  Results",
    "section": "3.5 Job Category vs Salary: “Technology, Data & Innovation” has the highest median salaries, while “Building Operations & Maintenance” fall at the lowest end of the salary range",
    "text": "3.5 Job Category vs Salary: “Technology, Data & Innovation” has the highest median salaries, while “Building Operations & Maintenance” fall at the lowest end of the salary range\n\n\nCode\ncategory_counts &lt;- nyc_jobs |&gt; \n  group_by(Job_Category) |&gt; \n  summarise(Count = n()) |&gt; \n  arrange(Job_Category)\n\nhead(category_counts)\n\n\n# A tibble: 6 × 2\n  Job_Category                                                             Count\n  &lt;chr&gt;                                                                    &lt;int&gt;\n1 Administration & Human Resources                                           297\n2 Administration & Human Resources Building Operations & Maintenance           8\n3 Administration & Human Resources Building Operations & Maintenance Poli…     2\n4 Administration & Human Resources Communications & Intergovernmental Aff…    13\n5 Administration & Human Resources Communications & Intergovernmental Aff…     1\n6 Administration & Human Resources Communications & Intergovernmental Aff…     2\n\n\nWe see that there are 177 unique job category. As we look into the table, we discover that there are job categories with similar names, often structured as a main job category with the highest count and other minor job categories that share similar names but fall under different branches or combinations. For example, “Administration & Human Resources” appears as a standalone category with a significant number of postings, but variations such as “Administration & Human Resources Building Operations & Maintenance” and “Administration & Human Resources Communications & Intergovernmental Affairs” indicate subsets of the primary category under specific functional areas.\nTo simplify the analysis, we will merge the sub-job categories into their corresponding main job categories. For example, the above two variations will be merged under the main category “Administration & Human Resources.” This merging helps reduce redundancy so that we can have a more accurate representation of the overall job categories.\n\n\nCode\n# Merge job categories\nnyc_jobs &lt;- nyc_jobs |&gt; \n  mutate(Merged_Job_Category = case_when(\n    grepl(\"^Administration & Human Resources\", Job_Category) ~ \"Administration & Human Resources\",\n    grepl(\"^Building Operations & Maintenance\", Job_Category) ~ \"Building Operations & Maintenance\",\n    grepl(\"^Communications & Intergovernmental Affairs\", Job_Category) ~ \"Communications & Intergovernmental Affairs\",\n    grepl(\"^Constituent Services & Community Programs\", Job_Category) ~ \"Constituent Services & Community Programs\",\n    grepl(\"^Engineering, Architecture, & Planning\", Job_Category) ~ \"Engineering, Architecture, & Planning\",\n    grepl(\"^Finance, Accounting, & Procurement\", Job_Category) ~ \"Finance, Accounting, & Procurement\",\n    grepl(\"^Green Jobs\", Job_Category) ~ \"Green Jobs\",\n    grepl(\"^Health\", Job_Category) ~ \"Health\",\n    grepl(\"^Legal Affairs\", Job_Category) ~ \"Legal Affairs\",\n    grepl(\"^Policy, Research & Analysis\", Job_Category) ~ \"Policy, Research & Analysis\",\n    grepl(\"^Public Safety, Inspections, & Enforcement\", Job_Category) ~ \"Public Safety, Inspections, & Enforcement\",\n    grepl(\"^Social Services\", Job_Category) ~ \"Social Services\",\n    grepl(\"^Technology, Data & Innovation\", Job_Category) ~ \"Technology, Data & Innovation\",\n    TRUE ~ Job_Category # Default: keep original if no match\n  ))\n\nmerged_category_counts &lt;- nyc_jobs |&gt; \n  group_by(Merged_Job_Category) |&gt; \n  summarise(Count = n()) |&gt; \n  arrange(desc(Count))\n\nmerged_category_counts\n\n\n# A tibble: 13 × 2\n   Merged_Job_Category                        Count\n   &lt;chr&gt;                                      &lt;int&gt;\n 1 Engineering, Architecture, & Planning       1883\n 2 Legal Affairs                               1872\n 3 Constituent Services & Community Programs    927\n 4 Health                                       843\n 5 Public Safety, Inspections, & Enforcement    729\n 6 Social Services                              710\n 7 Administration & Human Resources             699\n 8 Technology, Data & Innovation                473\n 9 Finance, Accounting, & Procurement           379\n10 Building Operations & Maintenance            333\n11 Policy, Research & Analysis                  191\n12 Green Jobs                                   114\n13 Communications & Intergovernmental Affairs   106\n\n\nNow, we only have 13 distinct job categories, which would make later analysis much easier.\n\n\nCode\nggplot(nyc_jobs, aes(x = reorder(Merged_Job_Category, Median_Salary, FUN = median), \n                     y = Median_Salary)) +\n  geom_bar(stat = \"summary\", fun = \"median\", fill = \"steelblue\") +\n  scale_y_continuous(labels = scales::comma) +\n  labs(\n    title = \"Median Salary by Merged Job Category\",\n    x = \"Merged Job Category\",\n    y = \"Median Salary\"\n  ) +\n  theme_grey() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))\n\n\n\n\n\n\n\n\n\nThe bar chart shows the median salary for different merged job categories. Categories like “Technology, Data & Innovation” has the highest median salaries, while categories like “Building Operations & Maintenance” fall at the lowest end of the salary range. This suggest that salary has to do with specific job category people choose.\n\n3.5.1 Programming Language vs. Salary: Job requiring programming languages might associate with higher salary (salary &gt;= $75,000)\n\n\nCode\nlibrary(dplyr)\nlibrary(vcd)\n\n\nLoading required package: grid\n\n\nCode\n# Step 1: Add Salary Category\nnyc_jobs &lt;- nyc_jobs |&gt; \n  mutate(Salary_Category = if_else(Median_Salary &gt;= 75000, \"&gt;=75000\", \"&lt;75000\"))\n\nnyc_jobs &lt;- nyc_jobs |&gt; \n  mutate(Programming_Required = if_else(any_programming_required, \"Yes\", \"No\"))\n\n# Step 2: Create the mosaic plot\nvcd::mosaic( ~ Programming_Required + Salary_Category,\n  data = nyc_jobs,\n  direction = c(\"v\", \"h\"),\n  highlighting = \"Salary_Category\",\n  highlighting_fill = c(\"skyblue\", \"orange\"),\n  main = \"Mosaic Plot: Programming Knowledge vs Salary\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nsalary_summary &lt;- nyc_jobs |&gt; \n  mutate(Programming_Type = if_else(\n    any_programming_required, \"Required Programming\", \"No Programming Required\"\n  )) |&gt; \n  group_by(Programming_Type) |&gt; \n  summarise(Median_Salary = median(Median_Salary, na.rm = TRUE))\n\nggplot(salary_summary, aes(x = Programming_Type, y = Median_Salary, fill = Programming_Type)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_manual(values = c(\"Required Programming\" = \"salmon\", \n                               \"No Programming Required\" = \"steelblue\")) +\n  labs(\n    title = \"Median Salary by Programming Requirement\",\n    x = \"Programming Requirement\",\n    y = \"Median Salary\",\n    fill = \"Programming Type\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5),\n        plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14)\n  )\n\n\n\n\n\n\n\n\n\nThe mosaic graph shows that salaries is clearly influenced by whether programming skills are required. Jobs requiring programming are more likely to offer higher salaries(salary &gt;= $75,000), while jobs that do not require programming tend to cluster around lower salary ranges(salary &lt; $75,000). This supports the conclusion that salary is dependent on knowing programming languages.\nThe bar chart also confirm this idea as jobs not requiring programming languages has median salary below $70,000, while jobs that require programming languages has median salary about $78,000.\nThis finding aligns with our earlier conclusion that “Technology, Data & Innovation” has the highest median salaries",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  D3-based Interactive Graph",
    "section": "",
    "text": "4.1 Overview of the interactive graph\nThis interactive graph is designed to help job seekers understand job market trends more clearly. The x-axis represents the months, while users can choose between the number of job postings or the average salary as the y-axis. These are two key factors that job seekers often care about the most.\nTo allow deeper insights, the graph includes five additional filter options: job category, career level, residency requirement, title classification, and whether programming skills are required. Users can select and combine any of these filters to see job count or salary trends for specific types of jobs over time.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>D3-based Interactive Graph</span>"
    ]
  },
  {
    "objectID": "d3graph.html#how-to-interact-with-the-graph",
    "href": "d3graph.html#how-to-interact-with-the-graph",
    "title": "4  D3-based Interactive Graph",
    "section": "4.2 How to interact with the graph",
    "text": "4.2 How to interact with the graph\nUsers can click on dropdown menus to filter data based on specific values, such as choosing certain job categories or career levels. By switching between the y-axis options, they can easily compare trends in job postings and salaries. Users can also move their cursor over any data point to view detailed information, such as the exact number of job postings or salary for that month. This interactivity makes it simple to explore and understand trends in a personalized way, helping job seekers pinpoint the information most relevant to their career goals.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>D3-based Interactive Graph</span>"
    ]
  },
  {
    "objectID": "d3graph.html#advantages-of-the-graph",
    "href": "d3graph.html#advantages-of-the-graph",
    "title": "4  D3-based Interactive Graph",
    "section": "4.3 Advantages of the graph",
    "text": "4.3 Advantages of the graph\nCompared to traditional graphs, this graph offers a more detailed and focused view of job trends. Users can switch between 2023 and 2024 data and use the five filter categories to refine the results further. By selecting one or multiple filter values, they can explore trends for particular job types they are interested in.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>D3-based Interactive Graph</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "Through our exploration, we identified several key takeaways about NYC’s job market. In terms of job positions, the Department of Environmental Protection, Bronx District Attorney, Department of Health/Mental Hygiene, and HRA/Dept of Social Services emerged as the top four agencies with the highest number of job postings, so monitoring heated social trends is important as it tells us the city’s workforce priorities. Moreover, slightly higher percentage of the position require programming languages, having some knowledge in programming language might give people more options. Regarding salaries, we found a clear association between higher career levels and increased earnings. Additionally, jobs in categories that requiring technical skills, such as Technology, Data & Innovation, had the highest median salaries, showing the importance of programming languages and other technical competencies. Thus, for those still undecided but try to make some money, learning technical skills and targeting fields like technology or engineering could open pathways to higher-paying jobs. For individuals with a specific career goal, they can benefit from using our interactive visualizations to explore job availability and salary trends within their desired field and career level.\nHowever, our analysis is limited by the scope of the data, which includes only job postings from NYC, primarily within a one-year time frame. Expanding the dataset to include data from previous years and other states could provide a more comprehensive understanding of the job market and salary trends. Looking ahead, collecting a broader range of data in terms of both geography and time will allow us to better learn job market patterns and trends.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]